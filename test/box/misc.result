env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter 'table: .*' to 'table: <address>'")
---
- true
...
-- gh-266: box.info() crash on uncofigured box
package.loaded['box.space'] == nil
---
- true
...
package.loaded['box.index'] == nil
---
- true
...
package.loaded['box.tuple'] == nil
---
- true
...
package.loaded['box.error'] == nil
---
- true
...
package.loaded['box.info'] == nil
---
- true
...
package.loaded['box.stat'] == nil
---
- true
...
package.loaded['box.session'] == nil
---
- true
...
space = box.schema.space.create('tweedledum')
---
...
index = space:create_index('primary', { type = 'hash' })
---
...
-- Test Lua from admin console. Whenever producing output,
-- make sure it's a valid YAML.
'  lua says: hello'
---
- '  lua says: hello'
...
-- # What's in the box?
t = {} for n in pairs(box) do table.insert(t, tostring(n)) end table.sort(t)
---
...
t
---
- - 'NULL'
  - atomic
  - backup
  - begin
  - cfg
  - commit
  - ctl
  - error
  - feedback
  - index
  - info
  - internal
  - is_in_txn
  - on_commit
  - on_rollback
  - once
  - priv
  - rollback
  - rollback_to_savepoint
  - runtime
  - savepoint
  - schema
  - sequence
  - session
  - slab
  - snapshot
  - space
  - sql
  - stat
  - tuple
...
t = nil
---
...
----------------
-- # box.error
----------------
test_run:cmd("restart server default")
env = require('test_run')
---
...
test_run = env.new()
---
...
box.error.last()
---
- null
...
box.error({code = 123, reason = 'test'})
---
- error: test
...
box.error(box.error.ILLEGAL_PARAMS, "bla bla")
---
- error: Illegal parameters, bla bla
...
box.error()
---
- error: Illegal parameters, bla bla
...
e = box.error.last()
---
...
e
---
- Illegal parameters, bla bla
...
e:unpack()
---
- type: ClientError
  code: 1
  message: Illegal parameters, bla bla
  trace:
  - file: '[C]'
    line: 4294967295
...
e.type
---
- ClientError
...
e.code
---
- 1
...
e.message
---
- Illegal parameters, bla bla
...
tostring(e)
---
- Illegal parameters, bla bla
...
e = nil
---
...
box.error.clear()
---
...
box.error.last()
---
- null
...
space = box.space.tweedledum
---
...
--
-- gh-2080: box.error() crashes with wrong parameters
box.error(box.error.UNSUPPORTED, "x", "x%s")
---
- error: x does not support x%s
...
box.error(box.error.UNSUPPORTED, "x")
---
- error: 'bad argument #3 to ''?'' (no value)'
...
box.error(box.error.UNSUPPORTED)
---
- error: 'box.error(): bad arguments'
...
--
-- gh-3031: allow to create an error object with no throwing it.
--
e = box.error.new(box.error.UNKNOWN)
---
...
e
---
- Unknown error
...
e = box.error.new(box.error.CREATE_SPACE, "space", "error")
---
...
e
---
- 'Failed to create space ''space'': error'
...
box.error.new()
---
- error: 'Usage: box.error.new(code, args)'
...
----------------
-- # box.stat
----------------
t = {}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for k, v in pairs(box.stat()) do
    table.insert(t, k)
end;
---
...
for k, v in pairs(box.stat().DELETE) do
    table.insert(t, k)
end;
---
...
for k, v in pairs(box.stat.DELETE) do
    table.insert(t, k)
end;
---
...
t;
---
- - DELETE
  - SELECT
  - INSERT
  - EVAL
  - CALL
  - ERROR
  - REPLACE
  - UPSERT
  - AUTH
  - EXECUTE
  - UPDATE
  - total
  - rps
  - total
  - rps
...
----------------
-- # box.space
----------------
type(box);
---
- table
...
type(box.space);
---
- table
...
t = {};
---
...
for i, v in pairs(space.index[0].parts[1]) do
    table.insert(t, tostring(i)..' : '..tostring(v))
end;
---
...
t;
---
- - 'type : unsigned'
  - 'is_nullable : false'
  - 'fieldno : 1'
...
----------------
-- # box.slab
----------------
string.match(tostring(box.slab.info()), '^table:') ~= nil;
---
- true
...
box.slab.info().arena_used >= 0;
---
- true
...
box.slab.info().arena_size > 0;
---
- true
...
string.match(tostring(box.slab.stats()), '^table:') ~= nil;
---
- true
...
t = {};
---
...
for k, v in pairs(box.slab.info()) do
    table.insert(t, k)
end;
---
...
t;
---
- - items_size
  - items_used_ratio
  - quota_size
  - quota_used_ratio
  - arena_used_ratio
  - items_used
  - quota_used
  - arena_size
  - arena_used
...
box.runtime.info().used > 0;
---
- true
...
box.runtime.info().maxalloc > 0;
---
- true
...
--
-- gh-502: box.slab.info() excessively sparse array
--
type(require('yaml').encode(box.slab.info()));
---
- string
...
----------------
-- # box.error
----------------
t = {}
for k,v in pairs(box.error) do
   if type(v) == 'number' then
    t[v] = 'box.error.'..tostring(k)
   end
end;
---
...
t;
---
- 0: box.error.UNKNOWN
  1: box.error.ILLEGAL_PARAMS
  2: box.error.MEMORY_ISSUE
  3: box.error.TUPLE_FOUND
  4: box.error.TUPLE_NOT_FOUND
  5: box.error.UNSUPPORTED
  6: box.error.NONMASTER
  7: box.error.READONLY
  8: box.error.INJECTION
  9: box.error.CREATE_SPACE
  10: box.error.SPACE_EXISTS
  11: box.error.DROP_SPACE
  12: box.error.ALTER_SPACE
  13: box.error.INDEX_TYPE
  14: box.error.MODIFY_INDEX
  15: box.error.LAST_DROP
  16: box.error.TUPLE_FORMAT_LIMIT
  17: box.error.DROP_PRIMARY_KEY
  18: box.error.KEY_PART_TYPE
  19: box.error.EXACT_MATCH
  20: box.error.INVALID_MSGPACK
  21: box.error.PROC_RET
  22: box.error.TUPLE_NOT_ARRAY
  23: box.error.FIELD_TYPE
  24: box.error.INDEX_PART_TYPE_MISMATCH
  25: box.error.SPLICE
  26: box.error.UPDATE_ARG_TYPE
  27: box.error.FORMAT_MISMATCH_INDEX_PART
  28: box.error.UNKNOWN_UPDATE_OP
  29: box.error.UPDATE_FIELD
  30: box.error.FUNCTION_TX_ACTIVE
  31: box.error.KEY_PART_COUNT
  32: box.error.PROC_LUA
  33: box.error.NO_SUCH_PROC
  34: box.error.NO_SUCH_TRIGGER
  35: box.error.NO_SUCH_INDEX
  36: box.error.NO_SUCH_SPACE
  37: box.error.NO_SUCH_FIELD
  38: box.error.EXACT_FIELD_COUNT
  39: box.error.FIELD_MISSING
  40: box.error.WAL_IO
  41: box.error.MORE_THAN_ONE_TUPLE
  42: box.error.ACCESS_DENIED
  43: box.error.CREATE_USER
  44: box.error.DROP_USER
  45: box.error.NO_SUCH_USER
  46: box.error.USER_EXISTS
  47: box.error.PASSWORD_MISMATCH
  48: box.error.UNKNOWN_REQUEST_TYPE
  49: box.error.UNKNOWN_SCHEMA_OBJECT
  50: box.error.CREATE_FUNCTION
  51: box.error.NO_SUCH_FUNCTION
  52: box.error.FUNCTION_EXISTS
  53: box.error.BEFORE_REPLACE_RET
  54: box.error.FUNCTION_MAX
  55: box.error.TRIGGER_EXISTS
  56: box.error.USER_MAX
  57: box.error.NO_SUCH_ENGINE
  58: box.error.RELOAD_CFG
  59: box.error.CFG
  60: box.error.SAVEPOINT_EMPTY_TX
  61: box.error.NO_SUCH_SAVEPOINT
  62: box.error.UNKNOWN_REPLICA
  63: box.error.REPLICASET_UUID_MISMATCH
  64: box.error.INVALID_UUID
  65: box.error.REPLICASET_UUID_IS_RO
  66: box.error.INSTANCE_UUID_MISMATCH
  68: box.error.INVALID_ORDER
  69: box.error.MISSING_REQUEST_FIELD
  70: box.error.IDENTIFIER
  71: box.error.DROP_FUNCTION
  72: box.error.ITERATOR_TYPE
  73: box.error.REPLICA_MAX
  74: box.error.INVALID_XLOG
  75: box.error.INVALID_XLOG_NAME
  76: box.error.INVALID_XLOG_ORDER
  77: box.error.NO_CONNECTION
  78: box.error.TIMEOUT
  79: box.error.ACTIVE_TRANSACTION
  80: box.error.CURSOR_NO_TRANSACTION
  81: box.error.CROSS_ENGINE_TRANSACTION
  82: box.error.NO_SUCH_ROLE
  83: box.error.ROLE_EXISTS
  84: box.error.CREATE_ROLE
  85: box.error.INDEX_EXISTS
  86: box.error.SESSION_CLOSED
  87: box.error.ROLE_LOOP
  88: box.error.GRANT
  89: box.error.PRIV_GRANTED
  90: box.error.ROLE_GRANTED
  91: box.error.PRIV_NOT_GRANTED
  92: box.error.ROLE_NOT_GRANTED
  93: box.error.MISSING_SNAPSHOT
  94: box.error.CANT_UPDATE_PRIMARY_KEY
  95: box.error.UPDATE_INTEGER_OVERFLOW
  96: box.error.GUEST_USER_PASSWORD
  97: box.error.TRANSACTION_CONFLICT
  98: box.error.UNSUPPORTED_PRIV
  99: box.error.LOAD_FUNCTION
  100: box.error.FUNCTION_LANGUAGE
  101: box.error.RTREE_RECT
  102: box.error.PROC_C
  103: box.error.UNKNOWN_RTREE_INDEX_DISTANCE_TYPE
  104: box.error.PROTOCOL
  105: box.error.UPSERT_UNIQUE_SECONDARY_KEY
  106: box.error.WRONG_INDEX_RECORD
  107: box.error.WRONG_INDEX_PARTS
  108: box.error.WRONG_INDEX_OPTIONS
  109: box.error.WRONG_SCHEMA_VERSION
  110: box.error.MEMTX_MAX_TUPLE_SIZE
  111: box.error.WRONG_SPACE_OPTIONS
  112: box.error.UNSUPPORTED_INDEX_FEATURE
  113: box.error.VIEW_IS_RO
  114: box.error.SAVEPOINT_NO_TRANSACTION
  115: box.error.SYSTEM
  116: box.error.LOADING
  117: box.error.CONNECTION_TO_SELF
  118: box.error.KEY_PART_IS_TOO_LONG
  119: box.error.COMPRESSION
  120: box.error.CHECKPOINT_IN_PROGRESS
  121: box.error.SUB_STMT_MAX
  122: box.error.COMMIT_IN_SUB_STMT
  123: box.error.ROLLBACK_IN_SUB_STMT
  124: box.error.DECOMPRESSION
  125: box.error.INVALID_XLOG_TYPE
  126: box.error.ALREADY_RUNNING
  127: box.error.INDEX_FIELD_COUNT_LIMIT
  128: box.error.LOCAL_INSTANCE_ID_IS_READ_ONLY
  129: box.error.BACKUP_IN_PROGRESS
  130: box.error.READ_VIEW_ABORTED
  131: box.error.INVALID_INDEX_FILE
  132: box.error.INVALID_RUN_FILE
  133: box.error.INVALID_VYLOG_FILE
  134: box.error.CHECKPOINT_ROLLBACK
  135: box.error.VY_QUOTA_TIMEOUT
  136: box.error.PARTIAL_KEY
  137: box.error.TRUNCATE_SYSTEM_SPACE
  138: box.error.LOAD_MODULE
  139: box.error.VINYL_MAX_TUPLE_SIZE
  140: box.error.WRONG_DD_VERSION
  141: box.error.WRONG_SPACE_FORMAT
  142: box.error.CREATE_SEQUENCE
  143: box.error.ALTER_SEQUENCE
  144: box.error.DROP_SEQUENCE
  145: box.error.NO_SUCH_SEQUENCE
  146: box.error.SEQUENCE_EXISTS
  147: box.error.SEQUENCE_OVERFLOW
  149: box.error.SPACE_FIELD_IS_DUPLICATE
  150: box.error.CANT_CREATE_COLLATION
  151: box.error.WRONG_COLLATION_OPTIONS
  152: box.error.NULLABLE_PRIMARY
  154: box.error.TRANSACTION_YIELD
  155: box.error.NO_SUCH_GROUP
  156: box.error.SQL_BIND_VALUE
  157: box.error.SQL_BIND_TYPE
  158: box.error.SQL_BIND_PARAMETER_MAX
  159: box.error.SQL_EXECUTE
  160: box.error.SQL
  161: box.error.SQL_BIND_NOT_FOUND
  162: box.error.ACTION_MISMATCH
  163: box.error.VIEW_MISSING_SQL
  164: box.error.FOREIGN_KEY_CONSTRAINT
  165: box.error.NO_SUCH_MODULE
  166: box.error.NO_SUCH_COLLATION
  167: box.error.CREATE_FK_CONSTRAINT
  168: box.error.DROP_FK_CONSTRAINT
  169: box.error.NO_SUCH_CONSTRAINT
  170: box.error.CONSTRAINT_EXISTS
  171: box.error.SQL_TYPE_MISMATCH
  172: box.error.ROWID_OVERFLOW
  173: box.error.DROP_COLLATION
  174: box.error.ILLEGAL_COLLATION_MIX
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- A test case for Bug#901674
-- No way to inspect exceptions from Box in Lua
--
function myinsert(tuple) box.space.tweedledum:insert(tuple) end
---
...
pcall(myinsert, {99, 1, 1953719668})
---
- true
...
pcall(myinsert, {1, 'hello'})
---
- true
...
pcall(myinsert, {1, 'hello'})
---
- false
- Duplicate key exists in unique index 'primary' in space 'tweedledum'
...
box.space.tweedledum:truncate()
---
...
myinsert = nil
---
...
-- A test case for gh-37: print of 64-bit number
ffi = require('ffi')
---
...
1, 1
---
- 1
- 1
...
tonumber64(1), 1
---
- 1
- 1
...
-- Testing 64bit
tonumber64()
---
- error: 'bad argument #1 to ''?'' (value expected)'
...
tonumber64('invalid number')
---
- null
...
tonumber64(123)
---
- 123
...
tonumber64('123')
---
- 123
...
type(tonumber64('4294967296')) == 'number'
---
- true
...
tonumber64('9223372036854775807') == tonumber64('9223372036854775807')
---
- true
...
tonumber64('9223372036854775807') - tonumber64('9223372036854775800')
---
- 7
...
tonumber64('18446744073709551615') == tonumber64('18446744073709551615')
---
- true
...
tonumber64('18446744073709551615') + 1
---
- 0
...
tonumber64(-1)
---
- -1
...
tonumber64('184467440737095516155')
---
- null
...
string.byte(require('msgpack').encode(tonumber64(123)))
---
- 123
...
--  A test case for Bug#1061747 'tonumber64 is not transitive'
tonumber64(tonumber64(2))
---
- 2
...
tostring(tonumber64(tonumber64(3)))
---
- '3'
...
--  A test case for Bug#1131108 'tonumber64 from negative int inconsistency'
tonumber64(-1)
---
- -1
...
tonumber64(-1LL)
---
- -1
...
tonumber64(-1ULL)
---
- 18446744073709551615
...
-1
---
- -1
...
-1LL
---
- -1
...
-1ULL
---
- 18446744073709551615
...
tonumber64(-1.0)
---
- -1
...
6LL - 7LL
---
- -1
...
tostring(tonumber64('1234567890123')) == '1234567890123'
---
- true
...
tostring(tonumber64('12345678901234')) == '12345678901234'
---
- true
...
tostring(tonumber64('123456789012345')) == '123456789012345ULL'
---
- true
...
tostring(tonumber64('1234567890123456')) == '1234567890123456ULL'
---
- true
...
--
-- gh-3466: Strange behaviour of tonumber64 function
--
tostring(tonumber64('9223372036854775807')) == '9223372036854775807ULL'
---
- true
...
tostring(tonumber64('18446744073709551615')) == '18446744073709551615ULL'
---
- true
...
tonumber64('18446744073709551616') == nil
---
- true
...
tostring(tonumber64('-9223372036854775808')) == '-9223372036854775808LL'
---
- true
...
tonumber64('-9223372036854775809') == nil
---
- true
...
tostring(tonumber64('0')) == '0'
---
- true
...
--
-- gh-3431: tonumber of strings with ULL.
--
tonumber64('-1ULL') == -1ULL
---
- true
...
tonumber64('-1LL') == -1LL
---
- true
...
tonumber64('12345678910ULL') == 12345678910ULL
---
- true
...
tonumber64(tostring(tonumber64('1234567890123456'))) == 1234567890123456ULL
---
- true
...
tonumber64('0x12') == 18
---
- true
...
tonumber64('0x12', 16) == 18
---
- true
...
tonumber64('0x12', 17) == nil
---
- true
...
tonumber64('0b01') == 1
---
- true
...
tonumber64('0b01', 2) == 1
---
- true
...
tonumber64('0b01', 3) == nil
---
- true
...
tonumber64('  0b1  ') == 1
---
- true
...
tonumber64('  0b1  ', 'badbase')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
tonumber64('  0b1  ', 123) -- big base
---
- error: 'bad argument #2 to ''?'' (base out of range)'
...
tonumber64('12345', 123) -- big base
---
- error: 'bad argument #2 to ''?'' (base out of range)'
...
tonumber64('0xfffff') == 1048575
---
- true
...
tonumber64('0b111111111111111111') == 262143
---
- true
...
tonumber64('20', 36)
---
- 72
...
tonumber64("", 10)
---
- null
...
tonumber64("", 32)
---
- null
...
tonumber64("-1")
---
- -1
...
tonumber64("-0x16")
---
- -22
...
tonumber64("-0b11")
---
- -3
...
tonumber64(" -0x16 ")
---
- -22
...
tonumber64(" -0b11 ")
---
- -3
...
-- numbers/cdata with base = 10 - return as is
tonumber64(100)
---
- 100
...
tonumber64(100, 10)
---
- 100
...
tonumber64(100LL)
---
- 100
...
tonumber64(100ULL, 10)
---
- 100
...
tonumber64(-100LL)
---
- -100
...
tonumber64(-100LL, 10)
---
- -100
...
tonumber64(ffi.new('char', 10))
---
- 10
...
tonumber64(ffi.new('short', 10))
---
- 10
...
tonumber64(ffi.new('int', 10))
---
- 10
...
tonumber64(ffi.new('int8_t', 10))
---
- 10
...
tonumber64(ffi.new('int16_t', 10))
---
- 10
...
tonumber64(ffi.new('int32_t', 10))
---
- 10
...
tonumber64(ffi.new('int64_t', 10))
---
- 10
...
tonumber64(ffi.new('unsigned char', 10))
---
- 10
...
tonumber64(ffi.new('unsigned short', 10))
---
- 10
...
tonumber64(ffi.new('unsigned int', 10))
---
- 10
...
tonumber64(ffi.new('unsigned int', 10))
---
- 10
...
tonumber64(ffi.new('uint8_t', 10))
---
- 10
...
tonumber64(ffi.new('uint16_t', 10))
---
- 10
...
tonumber64(ffi.new('uint32_t', 10))
---
- 10
...
tonumber64(ffi.new('uint64_t', 10))
---
- 10
...
tonumber64(ffi.new('float', 10))
---
- 10
...
tonumber64(ffi.new('double', 10))
---
- 10
...
-- number/cdata with custom `base` - is not supported
tonumber64(100, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(100LL, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(-100LL, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(100ULL, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('char', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('short', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int8_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int16_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int32_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int64_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned char', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned short', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned int', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned int', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint8_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint16_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint32_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint64_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('float', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('double', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
-- invalid types - return nil
ffi.cdef("struct __tonumber64_test {};")
---
...
tonumber64(ffi.new('struct __tonumber64_test'))
---
- null
...
tonumber64(nil)
---
- null
...
tonumber64(function() end)
---
- null
...
tonumber64({})
---
- null
...
collectgarbage('collect')
---
- 0
...
--  dostring()
dostring('abc')
---
- error: '[string "abc"]:1: ''='' expected near ''<eof>'''
...
dostring('abc=2')
---
...
dostring('return abc')
---
- 2
...
dostring('return ...', 1, 2, 3)
---
- 1
- 2
- 3
...
--  A test case for Bug#1043804 lua error() -> server crash
error()
---
- error: null
...
--  A test case for bitwise operations 
bit.lshift(1, 32)
---
- 1
...
bit.band(1, 3)
---
- 1
...
bit.bor(1, 2)
---
- 3
...
space:truncate()
---
...
dofile('fifo.lua')
---
...
fifomax
---
- 5
...
fifo_push(space, 1, 1)
---
- [1, 4, 5, 1, 0, 0, 0, 0]
...
fifo_push(space, 1, 2)
---
- [1, 5, 6, 1, 2, 0, 0, 0]
...
fifo_push(space, 1, 3)
---
- [1, 6, 7, 1, 2, 3, 0, 0]
...
fifo_push(space, 1, 4)
---
- [1, 7, 8, 1, 2, 3, 4, 0]
...
fifo_push(space, 1, 5)
---
- [1, 8, 4, 1, 2, 3, 4, 5]
...
fifo_push(space, 1, 6)
---
- [1, 4, 5, 6, 2, 3, 4, 5]
...
fifo_push(space, 1, 7)
---
- [1, 5, 6, 6, 7, 3, 4, 5]
...
fifo_push(space, 1, 8)
---
- [1, 6, 7, 6, 7, 8, 4, 5]
...
fifo_top(space, 1)
---
- 8
...
space:delete{1}
---
- [1, 6, 7, 6, 7, 8, 4, 5]
...
fifo_top(space, 1)
---
- 0
...
space:delete{1}
---
- [1, 4, 4, 0, 0, 0, 0, 0]
...
space:drop()
---
...
test_run:cmd("clear filter")
---
- true
...
-- test test_run:grep_log()
require('log').info('Incorrect password supplied')
---
...
test_run:grep_log("default", "password")
---
- password
...
-- some collation test
s = box.schema.space.create('test')
---
...
not not s:create_index('test1', {parts = {{1, 'string', collation = 'Unicode'}}})
---
- true
...
not not s:create_index('test2', {parts = {{2, 'string', collation = 'UNICODE'}}})
---
- true
...
not not s:create_index('test3', {parts = {{3, 'string', collation = 'UnIcOdE'}}}) -- I'd prefer to panic on that
---
- true
...
s:create_index('test4', {parts = {{4, 'string'}}}).parts
---
- - type: string
    is_nullable: false
    fieldno: 4
...
s:create_index('test5', {parts = {{5, 'string', collation = 'Unicode'}}}).parts
---
- - type: string
    is_nullable: false
    collation: unicode
    fieldno: 5
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
not not s:create_index('test1', {parts = {{1, 'scalar', collation = 'unicode_ci'}}})
---
- true
...
s:replace{1} s:replace{1.1} s:replace{false}
---
...
s:replace{'Блин'} s:replace{'Ёж'} s:replace{'ешь'} s:replace{'Же'} s:replace{'Уже'}
---
...
s:replace{'drop'} s:replace{'table'} s:replace{'users'}
---
...
s:select{}
---
- - [false]
  - [1]
  - [1.1]
  - ['drop']
  - ['table']
  - ['users']
  - ['Блин']
  - ['Ёж']
  - ['ешь']
  - ['Же']
  - ['Уже']
...
s:select{'еж'}
---
- - ['Ёж']
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
not not s:create_index('test1', {parts = {{1, 'number', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
not not s:create_index('test2', {parts = {{2, 'unsigned', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
not not s:create_index('test3', {parts = {{3, 'integer', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
not not s:create_index('test4', {parts = {{4, 'boolean', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
s:drop()
---
...
--
-- gh-2068 no error for invalid user during space creation
--
s = box.schema.space.create('test', {user="no_such_user"})
---
- error: User 'no_such_user' is not found
...
--
-- gh-3659 assertion failure after an error in code called from
-- box.session.su()
--
box.session.su("admin", function(x) return #x end, 3)
---
- error: '[string "return box.session.su("admin", function(x) re..."]:1: attempt to
    get length of local ''x'' (a number value)'
...
-- Too long WAL write warning (gh-2743).
s = box.schema.space.create('test')
---
...
_ = s:create_index('pk')
---
...
too_long_threshold = box.cfg.too_long_threshold
---
...
box.cfg{too_long_threshold = 0} -- log everything
---
...
expected_rows = 3
---
...
expected_lsn = box.info.lsn + 1
---
...
box.begin() for i = 1, expected_rows do s:insert{i} end box.commit()
---
...
msg = test_run:grep_log('default', 'too long WAL write.*')
---
...
rows, lsn = string.match(msg, '(%d+) rows at LSN (%d+)')
---
...
rows = tonumber(rows)
---
...
lsn = tonumber(lsn)
---
...
rows == expected_rows
---
- true
...
lsn == expected_lsn
---
- true
...
box.cfg{too_long_threshold = too_long_threshold}
---
...
s:drop()
---
...
